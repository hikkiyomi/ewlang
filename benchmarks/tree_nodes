function TreeNode(left, right, item) {
    array node[3];

    node[0] = left;
    node[1] = right;
    node[2] = item;

    return node;
}

function itemCheck(node) {
    if (node[0] == 0) {
        return node[2];
    }

    return node[2] + itemCheck(node[0]) - itemCheck(node[1]);
}

function bottomUpTree(item, depth) {
    if (depth > 0) {
        return TreeNode(
            bottomUpTree(2 * item - 1, depth - 1),
            bottomUpTree(2 * item, depth - 1),
            item
        );
    }

    return TreeNode(0, 0, item);
}

function max(a, b) {
    if (a > b) {
        return a;
    }

    return b;
}

function entrypoint() {
    ret = 0;

    for (n = 4; n <= 7; n = n + 1) {
        minDepth = 4;
        maxDepth = max(minDepth + 2, n);
        stretchDepth = maxDepth + 1;

        check = itemCheck(bottomUpTree(0, stretchDepth));
        longLivedTree = bottomUpTree(0, maxDepth);
        
        for (depth = minDepth; depth <= maxDepth; depth = depth + 2) {
            iterations = 1;

            for (j = 0; j < maxDepth - depth + minDepth; j = j + 1) {
                iterations = iterations * 2;
            }

            check = 0;
            
            for (i = 1; i <= iterations; i = i + 1) {
                check = check + itemCheck(bottomUpTree(i, depth));
                check = check + itemCheck(bottomUpTree(-i, depth));
            }
        }

        ret = ret + itemCheck(longLivedTree);
    }

    expected = 4;

    if (ret != expected) {
        print ret;
        print expected;
    }
}
